version: '3'

includes:
  werf:
    taskfile: .ops/taskfiles/werf.yaml
    internal: true

env:
  PROJECT: 'dot-env-generator'

tasks:
# Tasks: Werf
  render:
    desc: Renders the application chart with 'werf render'.
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default .CLI_ARGS}}'
    cmds:
      - task: werf:command
        vars: {
          COMMAND: 'render',
          ENVIRONMENT: '{{.ENVIRONMENT}}'
        }

  generate-env-werf:
    desc: Generates the .env of the provided environment from Werf
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default .CLI_ARGS}}'
    cmds:
      - bun run compile
      - ./dot-env-generator werf -e '{{.ENVIRONMENT}}'

  decrypt:
    desc: Decrypts secret values with 'werf helm secret values decrypt'.
    cmds:
      - task: werf:secrets
        vars: {
          SECRET_COMMAND: 'decrypt',
          ENVIRONMENT: '{{.CLI_ARGS}}'
        }

  encrypt:
    desc: Encrypts secret values with 'werf helm secret values encrypt'.
    cmds:
      - task: werf:secrets
        vars: {
          SECRET_COMMAND: 'encrypt',
          ENVIRONMENT: '{{.CLI_ARGS}}'
        }

  build:
    desc: "Compile binary for supported platforms"
    cmds:
      - for: ['linux-x64', 'linux-arm64', 'darwin-arm64', 'darwin-x64']
        cmd: |
          echo "Compiling for {{.ITEM}}..."
          bun build \
            --compile \
            --target=bun-{{.ITEM}} \
            --minify \
            --sourcemap \
            ./cli.ts \
            --outfile ./dist/$PROJECT-{{.ITEM}}

  compress:
    desc: "Compress the binaries"
    cmds:
      - for: ['linux-x64', 'linux-arm64', 'darwin-arm64', 'darwin-x64']
        cmd: |
          echo "Compressing {{.ITEM}} binary..."
          tar -czvf ./dist/$PROJECT-{{.ITEM}}.tar.gz -C ./dist/ $PROJECT-{{.ITEM}}
