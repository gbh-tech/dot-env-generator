name: üöÄ Deploy to S3

on:
  push:
    branches:
      - main

jobs:
  deploy-s3:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux-x64, linux-arm64, windows-x64, darwin-arm64, darwin-x64]
    steps:
      - name: üíª Checkout current code ref
        uses: actions/checkout@v4

      - name: üü¢ Configure Bun on runner
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: ‚òÅÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: üì¶ Install package dependencies using lockfile
        run: bun install --frozen-lockfile

      - name: üî® Run build
        run: bun run build

      - name: üî® Compile binary for supported platforms
        run: bun build
             --compile
             --target=bun-${{ matrix.os }}
             --minify
             --sourcemap
             ./cli.ts
             --outfile werf-env-generator-${{ matrix.os }}

      - name: üî® Compile binary for CI
        run: bun build
             --compile
             --minify
             --sourcemap
             ./cli.ts
             --outfile werf-env-generator-ci

      - name: üöÄ Upload binaries to S3
        run: |
          OS=${{ matrix.os }}
          case $OS in
            linux-*)
              PLATFORM="linux"
              SUFFIX="${OS#linux-}"
              ;;
            windows-*)
              PLATFORM="windows"
              SUFFIX="${OS#windows-}.exe"
              ;;
            darwin-*)
              PLATFORM="darwin"
              SUFFIX="${OS#darwin-}"
              ;;
          esac

          BUCKET="s3://gbh-utils"
          NAME="werf-env-generator"
          BIN="${NAME}-${SUFFIX}"

          if [[ $PLATFORM == "windows" ]]; then
            WERF_FILE=${NAME}-${{ matrix.os }}.exe
          else
            WERF_FILE=${NAME}-${{ matrix.os }}
          fi

          aws s3 cp ${WERF_FILE} ${BUCKET}/${PLATFORM}/${BIN} --acl public-read
          aws s3 sync ${NAME}-ci ${BUCKET}/${NAME} --acl public-read --delete
